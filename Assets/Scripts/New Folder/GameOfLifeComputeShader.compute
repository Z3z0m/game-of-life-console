#pragma kernel UpdateGrid

RWTexture2D<bool> grid;
RWTexture2D<bool> nextGrid;
RWStructuredBuffer<int> Result;

int width;
int height;

int CountLiveNeighbors(int x, int y)
{
    int count = 0;

    for (int i = -1; i <= 1; i++)
    {
        for (int j = -1; j <= 1; j++)
        {
            if (i == 0 && j == 0)
                continue;

            int neighborX = x + i;
            int neighborY = y + j;

            if (neighborX >= 0 && neighborX < width && neighborY >= 0 && neighborY < height)
            {
                if (grid[int2(neighborX, neighborY)])
                    count++;
            }
        }
    }

    return count;
}

[numthreads(10, 10, 1)]
void UpdateGrid(uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    
    float valx = 1;
    float valy = 0;


    Result[id.x] = valx + valy;
    Result[id.y] = valx + valy;

    int liveNeighbors = CountLiveNeighbors(x, y);
    bool isAlive = grid[int2(x, y)];

    if (isAlive && (liveNeighbors < 2 || liveNeighbors > 3))
    {
        nextGrid[int2(x, y)] = false; // Celula morre por solidão ou superpopulação
    }
    else if (!isAlive && liveNeighbors == 3)
    {
        nextGrid[int2(x, y)] = true; // Nova célula nasce por reprodução
    }
    else
    {
        nextGrid[int2(x, y)] = isAlive; // Célula permanece no mesmo estado
    }
}